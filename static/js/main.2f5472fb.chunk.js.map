{"version":3,"sources":["components/Ranking.js","actions/Ranking.js","containers/Ranking.js","containers/Nav.js","components/Nav.js","App.js","serviceWorker.js","reducers/shopping.js","reducers/Ranking.js","index.js","createStore.js"],"names":["Ranking","this","props","onMount","categoryId","nextProps","onUpdate","category","ranking","error","name","map","item","i","Card","key","code","style","maxWidth","margin","CardMedia","image","imageUrl","title","height","CardContent","Typography","type","CardActions","Button","raised","color","fullWidth","href","url","React","Component","defaultProps","startRequest","payload","receiveData","response","finishRequest","fetchRanking","dispatch","getState","a","async","categories","shopping","find","id","replace","queryString","qs","stringify","appid","category_id","fetchJsonp","json","data","connect","state","ownProps","actions","onClick","path","push","Drawer","variant","List","width","ListItem","button","to","ListItemText","primary","App","className","paddingLeft","CssBaseline","AppBar","left","Toolbar","marginTop","padding","Switch","Route","component","render","Redirect","match","params","Boolean","window","location","hostname","initialState","getRanking","itemLength","ResultSet","totalResultsReturned","index","Result","Code","Name","Url","Image","Medium","undefined","action","history","createBrowserHistory","store","reduxCreateStore","combineReducers","reducers","router","routerReducer","applyMiddleware","logger","thunk","routerMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f5472fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardActions from '@material-ui/core/CardActions'\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default class Ranking extends React.Component {\r\n    componentWillMount() {\r\n        this.props.onMount(this.props.categoryId);\r\n    }    \r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.categoryId !== nextProps.categoryId) {\r\n            this.props.onUpdate(nextProps.categoryId);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { category, ranking, error } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                {/* ランキングのタイトル */}\r\n                <h2>{\r\n                    (typeof category !== 'undefined') ?\r\n                        `${category.name}のランキング`:\r\n                        ''\r\n                }</h2>\r\n\r\n                {(() => {\r\n                    if (error) {\r\n                        return <p>エラーが発生しました</p>;\r\n                    } else if (typeof ranking ==='undefined') {\r\n                        return <p>読込中...</p>\r\n                    } else {\r\n                        return ranking.map((item, i) => (\r\n                            <Card\r\n                                key={`ranking-item-${item.code}`}\r\n                                style={{ maxWidth: '500px', margin: '32px auto' }}\r\n                            >\r\n                                <CardMedia\r\n                                    image={item.imageUrl}\r\n                                    title={`${i+1}位 ${item.name}`}\r\n                                    style={{ height: '200px' }}\r\n                                />\r\n                                <CardContent>\r\n                                    <Typography type=\"title\">\r\n                                        {`${i+1}位 ${item.name}`}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <Button\r\n                                        raised\r\n                                        color=\"secondary\"\r\n                                        fullWidth\r\n                                        href={item.url}\r\n                                    >\r\n                                        商品ページへ\r\n                                    </Button>\r\n                                </CardActions>\r\n                            </Card>\r\n                        ));\r\n                    }\r\n                })()}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nRanking.propTypes = {\r\n    categoryId: PropTypes.string,\r\n    onMount: PropTypes.func.isRequired,\r\n    onUpdate: PropTypes.func.isRequired\r\n};\r\n\r\nRanking.defaultProps = {\r\n    categoryId: '1'\r\n}\r\n\r\n","import fetchJsonp from 'fetch-jsonp';\r\nimport qs from 'qs';\r\nimport { replace } from 'react-router-redux';\r\n\r\nconst API_URL = 'http://shopping.yahooapis.jp/ShoppingWebService/V1/json/categoryRanking';\r\n\r\nconst APP_ID = 'dj00aiZpPWkxUzFqRmgzNGZkTCZzPWNvbnN1bWVyc2VjcmV0Jng9MDY-';\r\n\r\nconst startRequest = category => ({\r\n    type: 'START_REQUEST',\r\n    payload: { category },\r\n});\r\n\r\nconst receiveData = (category, error, response) => ({\r\n    type: 'RECEIVE_DATA',\r\n    payload: { category, error, response }\r\n});\r\n\r\nconst finishRequest = category => ({\r\n    type: 'FINISH_REQUEST',\r\n    payload: { category }\r\n});\r\n\r\nexport const fetchRanking = categoryId => {\r\n    return async (dispatch, getState) => {\r\n        // カテゴリIDに対するstate.shopping.categoriesの要素を取得\r\n        const categories = getState().shopping.categories;\r\n        const category = categories.find(category =>\r\n            category.id === categoryId);\r\n\r\n        // 対応するデータがない場合はトップページへリダイレクト\r\n        if (typeof category === 'undefined') {\r\n            dispatch(replace('/'));\r\n            return;\r\n        }\r\n\r\n        dispatch(startRequest(category));\r\n\r\n        const queryString = qs.stringify({\r\n            appid: APP_ID,\r\n            category_id: categoryId,\r\n        });\r\n\r\n        try {\r\n            const response = await fetchJsonp(`${API_URL}?${queryString}`);\r\n            const data = await response.json();\r\n            dispatch(receiveData(category, null, data));\r\n        } catch (err) {\r\n            dispatch(receiveData(category, err));\r\n        }\r\n        dispatch(finishRequest(category));\r\n    };\r\n}","import { connect } from 'react-redux';\r\nimport Ranking from '../components/Ranking';\r\nimport * as actions from '../actions/Ranking';\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    category: state.Ranking.category,\r\n    ranking: state.Ranking.ranking,\r\n    error: state.Ranking.error\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onMount(categoryId) {\r\n        dispatch(actions.fetchRanking(categoryId));\r\n    },\r\n\r\n    onUpdate(categoryId) {\r\n        dispatch(actions.fetchRanking(categoryId));\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);\r\n","import { connect } from 'react-redux';\r\nimport { push } from 'react-router-redux';\r\nimport Nav from '../components/Nav';\r\n\r\nconst mapStateToProps = state => ({\r\n    categories: state.shopping.categories\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onClick(path) {\r\n        dispatch(push(path));\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Nav);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nexport default function Nav({ categories, onClick }) {\r\n    // 遷移先パスの生成\r\n    // - カテゴリIDが\"1\"の場合は/all\r\n    // - それ以外は /category/カテゴリID\r\n    const to = category => category.id === '1' ? '/all' : `/category/${category.id}`;\r\n\r\n    return (\r\n        <Drawer variant=\"permanent\">\r\n            <List style={{ width: 240 }}>\r\n                {categories.map(category => (\r\n                    <ListItem\r\n                        button\r\n                        key={`menu-item-${category.id}`}\r\n                        onClick={() => onClick(to(category))}\r\n                        >\r\n                        <ListItemText primary={category.name} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nNav.propTypes = {\r\n    categories: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequierd,\r\n            name: PropTypes.string.isRequired\r\n        })\r\n    ).isRequired\r\n};\r\n","import React from 'react';\nimport { Route, Link, Switch, Redirect } from 'react-router-dom';\nimport Ranking from './containers/Ranking';\nimport Nav from './containers/Nav';\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ paddingLeft: 240 }}>\n      <CssBaseline />\n\n      <AppBar style={{ left: 240 }}>\n        <Toolbar>\n          <Typography type=\"title\" color=\"inherit\">\n            Yahoo! ショッピングランキング\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Nav />\n\n      <div style={{ marginTop: 64, padding: 32}}>\n        <Switch>\n          <Route path=\"/all\" component={Ranking} />\n          <Route path=\"/category/1\"\n            render={() => <Redirect to=\"/all\" />}\n          />\n          <Route path=\"/category/:id\"\n            render={\n              ({ match }) => <Ranking categoryId={match.params.id} />\n            } \n          />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    categories: [\r\n        {\r\n            id: '1',\r\n            name: 'すべてのカテゴリ'\r\n        },\r\n        {\r\n            id: '2502',\r\n            name: 'パソコン、周辺機器'\r\n        },\r\n        {\r\n            id: '10002',\r\n            name: '本、雑誌、コミック'\r\n        },\r\n    ]\r\n};\r\n\r\nexport default () => initialState;\r\n","// レスポンスからランキング情報だけを抜き出す\r\nconst getRanking = response => {\r\n    const ranking = [];\r\n    const itemLength = response.ResultSet.totalResultsReturned;\r\n    for (let index = 0; index < itemLength; index++) {\r\n        const item = response.ResultSet['0'].Result[index + ''];\r\n        ranking.push({\r\n            code: item.Code,\r\n            name: item.Name,\r\n            url: item.Url,\r\n            imageUrl: item.Image.Medium\r\n        })\r\n    }\r\n    return ranking;\r\n}\r\n\r\nconst initialState = {\r\n    categoryId: undefined,\r\n    ranking: undefined,\r\n    error: false\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'START_REQUEST':\r\n            return {\r\n                categoryId: action.payload.categoryId,\r\n                ranking: undefined,\r\n                error: false\r\n            };\r\n\r\n        case 'RECEIVE_DATA':\r\n            return action.payload.error ?\r\n            {\r\n                ...state,\r\n                error:false\r\n            }:\r\n            {\r\n                ...state,\r\n                ranking: getRanking(action.payload.response)\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'react-router-redux';\nimport createBrowserHistory from 'history/createHashHistory';\nimport createStore from './createStore';\n\n// historyのインスタンスを生成\nconst history = createBrowserHistory();\n\n// Storeの生成\nconst store = createStore(history);\n\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedRouter history={history}>\n            <App />\n        </ConnectedRouter>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\r\n    createStore as reduxCreateStore,\r\n    combineReducers,\r\n    applyMiddleware\r\n} from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { routerReducer, routerMiddleware } from 'react-router-redux';\r\nimport * as reducers from './reducers';\r\n\r\n// historyはsrc/index.jsから渡すようにする\r\nexport default function createStore(history){\r\n    return reduxCreateStore(\r\n        combineReducers({\r\n            ...reducers,\r\n            router: routerReducer\r\n        }),\r\n        applyMiddleware(\r\n            logger,\r\n            thunk,\r\n            routerMiddleware(history)\r\n        )\r\n    );\r\n}\r\n"],"sourceRoot":""}